{"version":3,"sources":["components/Skill.tsx","components/ExampleOfWork.tsx","temp/social-network-preview-img.png","temp/todolist-preview-img.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Skill","skillImg","skillInfo","skillName","skillNameColor","SkillContainer","elevation","src","style","width","height","alt","Typography","variant","color","IconButton","size","styled","Paper","ExampleOfWork","previewImage","projectName","projectDescription","gitHubURL","React","useState","open","setOpen","handleClose","ExampleOfWorkContainer","onClick","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","DialogContentText","overflowX","DialogActions","Button","href","target","fontSize","fontWeight","skills","workExamples","socialNetworkPreview","todolistPreview","App","isDarkMode","setDarkMode","mainRef","useRef","skillsRef","worksRef","contactsRef","visibleSkills","setVisibleSkills","visibleWorkExamples","setVisibleWorkExamples","listenToScroll","winScroll","document","body","scrollTop","documentElement","useEffect","window","addEventListener","removeEventListener","scrollTo","ref","current","scrollIntoView","behavior","block","ThemeProvider","theme","darkTheme","lightTheme","CssBaseline","className","RootContentContainer","AppBar","CustomToolbar","HeaderButtonContainer","MyInfoContainer","Grid","item","padding","margin","Avatar","sx","border","SkillsContainer","Slide","direction","in","appear","timeout","enter","exit","Skills","map","s","i","MyWorksContainer","Grow","transformOrigin","WorksExamples","e","ContactsContainer","RootPaperContactsContainer","display","flexDirection","alignItems","SocialContactsContainer","aria-label","container","FormContainer","TextField","id","label","required","multiline","rows","endIcon","FooterContainer","ModeButton","createTheme","palette","mode","primary","main","secondary","Toolbar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e2ff649.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport {IconButton, Paper, styled, Typography} from \"@mui/material\";\r\n\r\ntype SkillPropsType = {\r\n    skillName: string\r\n    skillNameColor: string\r\n    skillInfo: string\r\n    skillImg: string\r\n}\r\n\r\nfunction Skill({skillImg, skillInfo, skillName, skillNameColor}: SkillPropsType) {\r\n\r\n    return (\r\n        <SkillContainer elevation={5}>\r\n            <img src={skillImg} style={{width:'100px', height:'100px'}}  alt=\"logo\"/>\r\n            <Typography variant={\"h5\"} color={skillNameColor}>\r\n                {skillName}\r\n            </Typography>\r\n            <Typography variant={\"body1\"}>\r\n                {skillInfo}\r\n            </Typography>\r\n            <IconButton size={\"small\"}>Learn more</IconButton>\r\n\r\n        </SkillContainer>\r\n\r\n    );\r\n}\r\n\r\nexport default Skill;\r\n\r\nconst SkillContainer = styled(Paper)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: nowrap;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 30%;\r\n  min-height: 420px;\r\n  padding: 30px 20px 0 20px;\r\n\r\n  .MuiTypography-root {\r\n    padding: 20px;\r\n    text-align: center;\r\n  }\r\n  .MuiIconButton-root {\r\n    padding-bottom: 20px;\r\n    color: gray;\r\n  }\r\n  .MuiIconButton-root::after {\r\n    margin-left: 5px;\r\n    font-size: 20px;\r\n    content: \"→\";\r\n  }\r\n\r\n  .scale-up-hor-left {\r\n    -webkit-animation: scale-up-hor-left 0.2s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n    animation: scale-up-hor-left 0.2s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n  }\r\n  @-webkit-keyframes scale-up-hor-left {\r\n    0% {\r\n      -webkit-transform: scaleX(0.4);\r\n      transform: scaleX(0.4);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n    100% {\r\n      -webkit-transform: scaleX(1);\r\n      transform: scaleX(1);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n  }\r\n  @keyframes scale-up-hor-left {\r\n    0% {\r\n      -webkit-transform: scaleX(0.4);\r\n      transform: scaleX(0.4);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n    100% {\r\n      -webkit-transform: scaleX(2.5);\r\n      transform: scaleX(2.5);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n  }\r\n  \r\n  :hover{\r\n    cursor: pointer;\r\n    .MuiIconButton-root {\r\n      color: red;\r\n      background: none;\r\n      ::after{\r\n        content: \"\\\\2192\";\r\n        margin-left: 5px;\r\n        animation: scale-up-hor-left 0.4s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n      }\r\n    }\r\n    \r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    width: 95%;\r\n    margin: auto auto 20px;\r\n    min-height: 300px;\r\n  }\r\n\r\n`\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Grid, Paper,\r\n    styled,\r\n    Typography\r\n} from \"@mui/material\";\r\n\r\ntype ExampleOfWorkPropsType = {\r\n    previewImage: string,\r\n    projectName: string,\r\n    projectDescription: string\r\n    gitHubURL: string\r\n}\r\n\r\nfunction ExampleOfWork({previewImage, projectName, projectDescription, gitHubURL}:ExampleOfWorkPropsType) {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => setOpen(true);\r\n\r\n    const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <ExampleOfWorkContainer elevation={5}>\r\n            <img src={previewImage} onClick={handleClickOpen}/>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                maxWidth={\"xl\"}\r\n            >\r\n                <DialogTitle >\r\n                    {projectName}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText>\r\n                        <img src={previewImage} style={{width:'77vw', overflowX:'hidden'}}/>\r\n                    </DialogContentText>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color={\"secondary\"}>close</Button>\r\n                    <Button onClick={handleClose} color={\"success\"} href={gitHubURL} target=\"_blank\">Try online</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Typography variant={\"body2\"} fontSize={\"medium\"} fontWeight={\"bold\"}>Click to open preview</Typography>\r\n            <Typography variant={\"h5\"}>\r\n                {projectName}\r\n            </Typography>\r\n            <Typography variant={\"subtitle2\"}>\r\n                {projectDescription}\r\n            </Typography>\r\n        </ExampleOfWorkContainer>\r\n    );\r\n}\r\n\r\nexport default ExampleOfWork;\r\n\r\nconst ExampleOfWorkContainer = styled(Paper)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: nowrap;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  text-align: center;\r\n  width: 45%;\r\n  height: 100%;\r\n  padding: 40px;\r\n  \r\n  \r\n  img {\r\n    width: 500px;\r\n    border: 1px solid gray;\r\n    transition: 0.5s;\r\n    :hover {\r\n      opacity: 0.3;\r\n      cursor: pointer;\r\n      transform: scale(1.3);\r\n    }\r\n\r\n  }\r\n\r\n  .MuiTypography-body2 {\r\n    display: none;\r\n    position: absolute;\r\n    margin-top: 90px;\r\n    color: #3f51b5;\r\n    :hover {\r\n      display: block;\r\n      opacity: 1;\r\n       & img {\r\n        opacity: 0.3;\r\n      }\r\n    }\r\n  }\r\n  .MuiTypography-h5 {\r\n    padding-top: 20px;\r\n  }\r\n\r\n  & :hover {\r\n    & + .MuiTypography-body2 {\r\n      display: block;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    width: 95%;\r\n    margin: auto auto 20px;\r\n    img{\r\n      width: 400px;\r\n    }\r\n  }\r\n  @media (max-width: 1024px) {\r\n    img{\r\n      width: 250px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 1440px) {\r\n    img{\r\n      width: 300px;\r\n    }\r\n  }\r\n  \r\n`\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/social-network-preview-img.bd1213dc.png\";","export default __webpack_public_path__ + \"static/media/todolist-preview-img.1ddb29e6.png\";","import React, {useEffect, useState} from 'react';\nimport {\n    AppBar,\n    Avatar,\n    Button, createTheme, CssBaseline, Divider, FormControlLabel,\n    Grid, Grow,\n    IconButton,\n    PaletteOptions, Paper, Slide,\n    styled, Switch,\n    TextField, ThemeProvider,\n    Toolbar,\n    Typography\n} from \"@mui/material\";\nimport './App.css';\nimport SendIcon from '@mui/icons-material/Send';\nimport LinkedInIcon from '@mui/icons-material/LinkedIn';\nimport InstagramIcon from '@mui/icons-material/Instagram';\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport CopyrightIcon from '@mui/icons-material/Copyright';\nimport LightModeIcon from '@mui/icons-material/LightMode';\nimport DarkModeIcon from '@mui/icons-material/DarkMode';\nimport PhoneCallbackOutlinedIcon from '@mui/icons-material/PhoneCallbackOutlined';\nimport EmailOutlinedIcon from '@mui/icons-material/EmailOutlined';\nimport CheckIcon from '@mui/icons-material/Check';\nimport LocationOnOutlinedIcon from '@mui/icons-material/LocationOnOutlined';\nimport Skill from \"./components/Skill\";\nimport ExampleOfWork from \"./components/ExampleOfWork\";\nimport socialNetworkPreview from './temp/social-network-preview-img.png'\nimport todolistPreview from './temp/todolist-preview-img.png'\n\ntype SkillType = {\n    skillName: string\n    skillNameColor: string\n    skillInfo: string\n    skillImg: string\n}\ntype ExampleProjectType = {\n    previewImage: string,\n    projectName: string,\n    projectDescription: string\n    gitHubURL: string\n}\n\nconst skills = [\n    {\n        skillName: 'React',\n        skillNameColor: '#61DBFB',\n        skillInfo: 'React is a declarative, efficient, and flexible JavaScript library for building user interfaces. ',\n        skillImg: 'https://img.icons8.com/color/96/000000/react-native.png'\n    },\n    {\n        skillName: 'Redux',\n        skillNameColor: '#764abc',\n        skillInfo: 'Redux helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.',\n        skillImg: 'https://img.icons8.com/color/96/000000/redux.png'\n    },\n    {\n        skillName: 'TypeScript',\n        skillNameColor: '#007acc',\n        skillInfo: 'TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.',\n        skillImg: 'https://img.icons8.com/color/96/000000/typescript.png'\n    },\n] as Array<SkillType>\nconst workExamples = [\n    {\n        previewImage: socialNetworkPreview,\n        projectName: 'Social network',\n        projectDescription: 'A social network is a website that allows people with similar interests to come together and shar information and photos',\n        gitHubURL: 'https://aleksandrdemidovich.github.io/social-network-mui/'\n    },\n    {\n        previewImage: todolistPreview,\n        projectName: 'Todolist',\n        projectDescription: 'What is a ToDo List? The definition is a simple one. It\\'s a list of tasks you need to complete, or things that you want to do.',\n        gitHubURL: 'https://aleksandrdemidovich.github.io/todo-list/'\n    },\n] as Array<ExampleProjectType>\n\n// const helloArr = 'Hello!'.split('')\n// const myNameArr = 'My name is Aleksandr Demidovich'.split('')\n// const myPositionArr = 'I am front-end developer'.split('')\n\n\nfunction App() {\n\n\n    const [isDarkMode, setDarkMode] = useState(true)\n\n    // const [hello, setHello] = useState('')\n    // const [myName, setMyName] = useState('')\n    // const [myPosition, setMyPosition] = useState('')\n\n    // const showLetterEverySecond = (arr: string[], setState: (str: string) => void) => {\n    //     let index = 0;\n    //     let copyState = ''\n    //     const timer = setInterval(function () {\n    //         copyState = copyState + arr[index++]\n    //         setState(copyState)\n    //         console.log(hello)\n    //         if (index === arr.length) clearInterval(timer)\n    //     }, 50);\n    // }\n\n    // useEffect(() => {\n    //     showLetterEverySecond(helloArr, (copyState) => {\n    //         setHello(copyState)\n    //     })\n    //     setTimeout(() => {\n    //         showLetterEverySecond(myNameArr, (copyState) => {\n    //             setMyName(copyState)\n    //         })\n    //         setTimeout(() => {\n    //             showLetterEverySecond(myPositionArr, (copyState) => {\n    //                 setMyPosition(copyState)\n    //             })\n    //         }, 1500)\n    //     }, 500)\n    // }, [])\n\n\n    const mainRef = React.useRef<HTMLDivElement>(null)\n    const skillsRef = React.useRef<HTMLDivElement>(null)\n    const worksRef = React.useRef<HTMLDivElement>(null)\n    const contactsRef = React.useRef<HTMLDivElement>(null)\n\n\n    const [visibleSkills, setVisibleSkills] = React.useState(false);\n    const [visibleWorkExamples, setVisibleWorkExamples] = React.useState(false);\n\n\n    const listenToScroll = () => {\n        let heightToHideSkills = 1300;\n        let heightToHideWorkExamples = 2300;\n        const winScroll = document.body.scrollTop ||\n            document.documentElement.scrollTop;\n\n        if (winScroll > heightToHideSkills) {\n            // visibleSkills &&  // to limit setting state only the first time\n            setVisibleSkills(false);\n        } else {\n            setVisibleSkills(true);\n        }\n\n        if (winScroll > heightToHideWorkExamples) {\n            // visibleWorkExamples &&      // to limit setting state only the first time\n            setVisibleWorkExamples(false);\n        } else {\n            setVisibleWorkExamples(true);\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", listenToScroll);\n        return () =>\n            window.removeEventListener(\"scroll\", listenToScroll);\n    }, [visibleSkills])\n\n\n    const scrollTo = (ref: any) => {\n        if (ref && ref.current) {\n            ref.current.scrollIntoView({behavior: 'smooth', block: 'start'})\n        }\n    }\n\n    return (\n        <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n            <CssBaseline/>\n            <div className=\"App\">\n                <RootContentContainer ref={mainRef}>\n                    <AppBar>\n                        <CustomToolbar>\n                            <HeaderButtonContainer>\n                                <Button color={\"secondary\"} onClick={() => scrollTo(mainRef)}>Home</Button>\n                                <Button color={\"secondary\"} onClick={() => scrollTo(skillsRef)}>Skills</Button>\n                                <Button color={\"secondary\"} onClick={() => scrollTo(worksRef)}>Works</Button>\n                                <Button color={\"secondary\"} onClick={() => scrollTo(contactsRef)}>Contacts</Button>\n                            </HeaderButtonContainer>\n                        </CustomToolbar>\n                    </AppBar>\n                    <MyInfoContainer>\n                        <Grid item>\n                            <div className=\"autoWritter\">\n                                <h1 className=\"autoWrite-text\"\n                                    style={isDarkMode ? {color: 'white', padding: 0, margin: 0} : {\n                                        color: 'black',\n                                        padding: 0,\n                                        margin: 0\n                                    }}>Hello!</h1>\n                            </div>\n                            <div className=\"autoWritter\">\n                                <h2 className=\"autoWrite-text\"\n                                    style={isDarkMode ? {color: 'white', padding: 0, margin: 0} : {\n                                        color: 'black',\n                                        padding: 0,\n                                        margin: 0\n                                    }}>My name is Aleksandr Demidovich</h2>\n                            </div>\n                            <div className=\"autoWritter\">\n                                <h2 className=\"autoWrite-text\"\n                                    style={isDarkMode ? {color: 'white', padding: 0, margin: 0} : {\n                                        color: 'black',\n                                        padding: 0,\n                                        margin: 0\n                                    }}>I am front-end developer</h2>\n                            </div>\n                            {/*<Typography variant={\"h5\"}>{hello}</Typography>*/}\n                            {/*<Typography variant={\"h4\"}>{myName}</Typography>*/}\n                            {/*<Typography variant={\"h2\"}>{myPosition}</Typography>*/}\n                        </Grid>\n                        <Grid item>\n                            <Avatar\n                                alt=\"Remy Sharp\"\n                                src=\"https://www.seoclerk.com/pics/319222-1IvI0s1421931178.png\"\n                                sx={{width: 350, height: 350, border: '1px solid gray'}}\n                            />\n                        </Grid>\n                    </MyInfoContainer>\n                    <SkillsContainer ref={skillsRef}>\n                        <Typography variant={\"h3\"}>\n                            My skills\n                        </Typography>\n                        <Slide direction={\"left\"} in={visibleSkills} appear timeout={{enter: 2000, exit: 1500}}>\n                            <Skills>\n                                {\n                                    skills.map((s, i) => {\n                                        return <Skill key={i}\n                                                      skillName={s.skillName}\n                                                      skillNameColor={s.skillNameColor}\n                                                      skillInfo={s.skillInfo}\n                                                      skillImg={s.skillImg}/>\n                                    })\n                                }\n                            </Skills>\n                        </Slide>\n                    </SkillsContainer>\n                    <MyWorksContainer ref={worksRef}>\n                        <Typography variant={\"h3\"}>\n                            Examples of my work\n                        </Typography>\n                        <Grow\n                            in={visibleWorkExamples}\n                            style={{transformOrigin: '0 0 0'}}\n                            {...(visibleWorkExamples ? {timeout: 2000} : {})}\n                        >\n                            <WorksExamples>\n                                {\n                                    workExamples.map((e, i) => {\n                                        return <ExampleOfWork key={i}\n                                                              previewImage={e.previewImage}\n                                                              projectName={e.projectName}\n                                                              projectDescription={e.projectDescription}\n                                                              gitHubURL={e.gitHubURL}/>\n                                    })\n                                }\n                            </WorksExamples>\n                        </Grow>\n\n                    </MyWorksContainer>\n                    <ContactsContainer ref={contactsRef}>\n                        <Typography variant={\"h3\"}>Contacts</Typography>\n                        <RootPaperContactsContainer elevation={5}>\n                            <Grid item>\n                                <Typography variant={'h2'} fontWeight={\"bold\"}>Let's discuss your offer</Typography>\n                                <Grid item >\n                                    <PhoneCallbackOutlinedIcon  fontSize={\"medium\"}/>\n                                    <h4 style={{margin: 0}}>+44 1632 967704</h4>\n                                </Grid>\n                                <Grid item display={\"flex\"} flexDirection={\"row\"} alignItems={\"center\"}>\n                                    <EmailOutlinedIcon  fontSize={\"medium\"}/>\n                                    <h4 style={{margin: 0}}>your@gmail.com</h4>\n                                </Grid>\n                                <Grid item display={\"flex\"} flexDirection={\"row\"} alignItems={\"center\"}>\n                                    <LocationOnOutlinedIcon  fontSize={\"medium\"}/>\n                                    <h4 style={{margin: 0}}>Brest, Belarus</h4>\n                                </Grid>\n\n                                <SocialContactsContainer>\n                                    <IconButton aria-label=\"LinkedIn\">\n                                        <LinkedInIcon style={{color: '#2867B2'}} fontSize={\"large\"}/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"GitHub\">\n                                        <GitHubIcon style={isDarkMode ? {color: '#e8eaea'} : {color: '#171515'}}\n                                                    fontSize={\"large\"}/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"Instagram\">\n                                        <InstagramIcon style={{color: '#bc2a8d'}} fontSize={\"large\"}/>\n                                    </IconButton>\n                                </SocialContactsContainer>\n                                <Grid item display={\"flex\"} flexDirection={\"row\"} alignItems={\"center\"}>\n                                    <CheckIcon style={{margin: '0 20px 0 50px'}} color={\"success\"} fontSize={\"large\"}/>\n                                    <h3>Also i am considering the option of remote work</h3>\n                                </Grid>\n                            </Grid>\n                            <Grid container>\n                                <FormContainer>\n                                    <TextField fullWidth id=\"outlined-basic\" label=\"Name\" variant=\"standard\" required/>\n                                    <TextField fullWidth id=\"outlined-basic\" label=\"Email\" variant=\"standard\" required/>\n                                    <TextField\n                                        variant={\"standard\"}\n                                        fullWidth\n                                        id=\"outlined-multiline-static\"\n                                        label=\"Message\"\n                                        multiline\n                                        required\n                                        rows={3}\n                                    />\n                                    <Button variant=\"contained\" size={\"large\"} endIcon={<SendIcon/>}>Send</Button>\n                                </FormContainer>\n                            </Grid>\n                        </RootPaperContactsContainer>\n                    </ContactsContainer>\n                    <FooterContainer>\n                        <Typography variant={\"h4\"}>Aleksandr Demidovich</Typography>\n                        <Typography variant={\"subtitle1\"} display={\"flex\"} alignItems={\"center\"}>\n                            <CopyrightIcon fontSize={\"small\"}/>\n                            All rights reserved\n                        </Typography>\n                    </FooterContainer>\n                </RootContentContainer>\n                <ModeButton aria-label=\"Switcher Mode\" size={\"large\"} onClick={() => setDarkMode(!isDarkMode)}>\n                    {isDarkMode ? <LightModeIcon color={\"warning\"}/> : <DarkModeIcon/>}\n                </ModeButton>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n\nconst lightTheme = createTheme({\n    palette: {\n        mode: 'light',\n        primary: {\n            main: '#90caf9',\n        },\n        secondary: {\n            main: '#ce93d8',\n        },\n    },\n});\nconst darkTheme = createTheme({\n    palette: {\n        mode: 'dark',\n        primary: {\n            main: '#3f51b5',\n        },\n        secondary: {\n            main: '#f50057',\n        },\n    } as PaletteOptions,\n});\n\nconst RootContentContainer = styled(Grid)`\n  width: 75%;\n  margin: auto;\n\n  @media (max-width: 768px) {\n    width: 95%;;\n  }\n`\nconst HeaderButtonContainer = styled(Grid)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  flex-wrap: nowrap;\n\n  & .MuiButton-root {\n    color: white;\n    background: none;\n  }\n\n  @media (max-width: 768px) {\n    justify-content: space-around;\n  }\n`\nconst CustomToolbar = styled(Toolbar)`\n  width: 75%;\n  margin: auto;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n\n  @media (max-width: 768px) {\n    width: 95%;\n    justify-content: center;\n  }\n`\nconst MyInfoContainer = styled(Grid)`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n\n  //.MuiTypography-h3 {\n  //  font-size: 48px;\n  //  font-weight: 400;\n  //}\n\n  .MuiGrid-item div {\n    flex-direction: column;\n    flex-wrap: wrap;\n    align-content: flex-start;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: 0;\n    margin: 0;\n  }\n\n  .MuiGrid-item div h1 {\n    width: auto;\n  }\n\n  @media (max-width: 768px) {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    text-align: center;\n    justify-content: space-around;\n    overflow-x: hidden;\n    padding-top: 15%;\n    .MuiAvatar-root {\n      margin-top: 50px;\n    }\n\n  ;\n    h2 {\n      font-size: 1rem;\n    }\n  }\n`\nconst SkillsContainer = styled(Grid)`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: flex-start;\n  justify-content: center;\n  overflow-x: hidden;\n  vertical-align: center;\n\n  @media (max-width: 768px) {\n    display: flex;\n    justify-content: flex-start;\n    height: 100%;\n  }\n`\nconst Skills = styled(Grid)`\n  width: 100%;\n  display: flex;\n  margin-top: 30px;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`\nconst MyWorksContainer = styled(Grid)`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-wrap: nowrap;\n  align-items: flex-start;\n  text-align: center;\n\n  @media (max-width: 768px) {\n    height: 100%;\n  }\n`\nconst WorksExamples = styled(Grid)`\n  width: 100%;\n  margin-top: 30px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n\n`\nconst ContactsContainer = styled(Grid)`\n  width: 100%;\n  display: flex;\n  height: 100vh;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: flex-start;\n\n\n  .MuiButton-root {\n    margin-top: 20px;\n    color: white;\n    margin-left: auto;\n  }\n\n  .MuiGrid-container {\n    width: 50%;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    align-items: center;\n    padding-bottom: 30px;\n\n  }\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    .MuiPaper-root {\n      flex-direction: column;\n    }\n\n  ,\n  .MuiGrid-container {\n    width: 100%;\n  }\n  }\n`\nconst RootPaperContactsContainer = styled(Paper)`\n  width: 100%;\n  padding: 30px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  margin-top: 30px;\n\n  .MuiGrid-item {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    .MuiGrid-item {\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n    }\n  }\n\n  @media (max-width: 768px) {\n    .MuiPaper-root {\n      flex-direction: column;\n    }\n\n  ,\n  }\n`\nconst FormContainer = styled('form')`\n  width: 80%;\n  display: flex;\n  margin-top: 20px;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n\n  .MuiTextField-root {\n    margin: 20px;\n  }\n\n`\nconst FooterContainer = styled(Grid)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: center;\n\n\n  .MuiTypography-h4 {\n    font-size: 1.5rem;\n  }\n`\nconst SocialContactsContainer = styled(Grid)`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    justify-content: space-around;\n  }\n`\nconst ModeButton = styled(IconButton)`\n  position: sticky;\n  bottom: 10px;\n  right: 0;\n`","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}